-- Create missing tables and columns for seed data scripts
-- This script creates the tables that the seed data scripts expect

USE SOCOM_UI;

-- Create USR_SITE_USERS table
CREATE TABLE IF NOT EXISTS USR_SITE_USERS (
    USER_ID INT PRIMARY KEY,
    USER_NAME VARCHAR(100),
    USER_EMAIL VARCHAR(255),
    USER_ROLE VARCHAR(50),
    `GROUP` VARCHAR(50),
    IS_ACTIVE BOOLEAN DEFAULT TRUE,
    IS_DELETED BOOLEAN DEFAULT FALSE,
    CREATED_DATETIME TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Create USR_ADMIN_USERS table
CREATE TABLE IF NOT EXISTS USR_ADMIN_USERS (
    USER_ID INT PRIMARY KEY,
    ADMIN_TYPE VARCHAR(50),
    ADMIN_LEVEL VARCHAR(50),
    IS_ACTIVE BOOLEAN DEFAULT TRUE,
    CREATED_DATETIME TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Create USR_CAP_USERS table
CREATE TABLE IF NOT EXISTS USR_CAP_USERS (
    USER_ID INT PRIMARY KEY,
    CAPABILITY_SPONSOR_CODE VARCHAR(50),
    `GROUP` VARCHAR(50),
    IS_ACTIVE BOOLEAN DEFAULT TRUE,
    IS_DELETED BOOLEAN DEFAULT FALSE,
    CREATED_DATETIME TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Create USR_AO_AD_USERS table
CREATE TABLE IF NOT EXISTS USR_AO_AD_USERS (
    USER_ID INT PRIMARY KEY,
    AO_AD_TYPE VARCHAR(50),
    `GROUP` VARCHAR(50),
    IS_ACTIVE BOOLEAN DEFAULT TRUE,
    IS_DELETED BOOLEAN DEFAULT FALSE,
    CREATED_DATETIME TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Create USR_LOOKUP_USER_CRITERIA_NAME table
CREATE TABLE IF NOT EXISTS USR_LOOKUP_USER_CRITERIA_NAME (
    id INT AUTO_INCREMENT PRIMARY KEY,
    USER_ID INT,
    CRITERIA_NAME VARCHAR(100),
    CRITERIA_DESCRIPTION TEXT,
    IS_ACTIVE BOOLEAN DEFAULT TRUE,
    CREATED_DATETIME TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Create USR_LOOKUP_USER_CRITERIA_TERMS table
CREATE TABLE IF NOT EXISTS USR_LOOKUP_USER_CRITERIA_TERMS (
    id INT AUTO_INCREMENT PRIMARY KEY,
    CRITERIA_NAME_ID INT,
    TERM_NAME VARCHAR(100),
    TERM_VALUE VARCHAR(100),
    IS_ACTIVE BOOLEAN DEFAULT TRUE,
    CREATED_DATETIME TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Create USR_OPTION_SCORES table
CREATE TABLE IF NOT EXISTS USR_OPTION_SCORES (
    id INT AUTO_INCREMENT PRIMARY KEY,
    USER_ID INT,
    OPTION_NAME VARCHAR(100),
    SCORE_VALUE DECIMAL(5,2),
    SCORE_TYPE VARCHAR(50),
    IS_ACTIVE BOOLEAN DEFAULT TRUE,
    CREATED_DATETIME TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Create USR_ZBT_AD_SAVES table
CREATE TABLE IF NOT EXISTS USR_ZBT_AD_SAVES (
    id INT AUTO_INCREMENT PRIMARY KEY,
    USER_ID INT,
    ZBT_DATA TEXT,
    SAVE_NAME VARCHAR(100),
    IS_ACTIVE BOOLEAN DEFAULT TRUE,
    CREATED_DATETIME TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Create USR_ZBT_AO_SAVES table
CREATE TABLE IF NOT EXISTS USR_ZBT_AO_SAVES (
    id INT AUTO_INCREMENT PRIMARY KEY,
    USER_ID INT,
    ZBT_DATA TEXT,
    SAVE_NAME VARCHAR(100),
    IS_ACTIVE BOOLEAN DEFAULT TRUE,
    CREATED_DATETIME TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Create USR_ISSUE_AD_SAVES table
CREATE TABLE IF NOT EXISTS USR_ISSUE_AD_SAVES (
    id INT AUTO_INCREMENT PRIMARY KEY,
    USER_ID INT,
    ISSUE_DATA TEXT,
    SAVE_NAME VARCHAR(100),
    IS_ACTIVE BOOLEAN DEFAULT TRUE,
    CREATED_DATETIME TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Create USR_ISSUE_AO_SAVES table
CREATE TABLE IF NOT EXISTS USR_ISSUE_AO_SAVES (
    id INT AUTO_INCREMENT PRIMARY KEY,
    USER_ID INT,
    ISSUE_DATA TEXT,
    SAVE_NAME VARCHAR(100),
    IS_ACTIVE BOOLEAN DEFAULT TRUE,
    CREATED_DATETIME TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Create USR_ISSUE_AD_FINAL_SAVES table
CREATE TABLE IF NOT EXISTS USR_ISSUE_AD_FINAL_SAVES (
    id INT AUTO_INCREMENT PRIMARY KEY,
    USER_ID INT,
    ISSUE_DATA TEXT,
    SAVE_NAME VARCHAR(100),
    IS_ACTIVE BOOLEAN DEFAULT TRUE,
    CREATED_DATETIME TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Create USR_LOOKUP_CYCLES_HISTORY table
CREATE TABLE IF NOT EXISTS USR_LOOKUP_CYCLES_HISTORY (
    id INT AUTO_INCREMENT PRIMARY KEY,
    CYCLE_ID INT,
    CYCLE_NAME VARCHAR(100),
    CYCLE_YEAR INT,
    ACTION_TYPE VARCHAR(50),
    USER_ID INT,
    CREATED_DATETIME TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Create USR_LOOKUP_POM_POSITION_HISTORY table
CREATE TABLE IF NOT EXISTS USR_LOOKUP_POM_POSITION_HISTORY (
    id INT AUTO_INCREMENT PRIMARY KEY,
    POM_POSITION_ID INT,
    POSITION_NAME VARCHAR(100),
    ACTION_TYPE VARCHAR(50),
    USER_ID INT,
    CREATED_DATETIME TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Create USR_DT_LOOKUP_TABLE_METADATA table
CREATE TABLE IF NOT EXISTS USR_DT_LOOKUP_TABLE_METADATA (
    id INT AUTO_INCREMENT PRIMARY KEY,
    TABLE_NAME VARCHAR(100),
    COLUMN_NAME VARCHAR(100),
    DATA_TYPE VARCHAR(100),
    IS_REQUIRED BOOLEAN,
    DEFAULT_VALUE VARCHAR(255),
    CREATED_DATETIME TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Create USR_DT_DIRTY_TABLE_EDIT_JOBS table
CREATE TABLE IF NOT EXISTS USR_DT_DIRTY_TABLE_EDIT_JOBS (
    id INT AUTO_INCREMENT PRIMARY KEY,
    TABLE_NAME VARCHAR(100),
    JOB_TYPE VARCHAR(50),
    STATUS VARCHAR(50),
    USER_ID INT,
    CREATED_DATETIME TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Create POM table
CREATE TABLE IF NOT EXISTS POM (
    POM_ID INT AUTO_INCREMENT PRIMARY KEY,
    POM_YEAR INT,
    POM_NAME VARCHAR(100),
    IS_ACTIVE BOOLEAN DEFAULT TRUE,
    CREATED_DATETIME TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Create ZBT table
CREATE TABLE IF NOT EXISTS ZBT (
    ZBT_ID INT AUTO_INCREMENT PRIMARY KEY,
    ZBT_NAME VARCHAR(100),
    FISCAL_YEAR INT,
    ZBT_DATA TEXT,
    CREATED_DATETIME TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Create ISS table
CREATE TABLE IF NOT EXISTS ISS (
    ISS_ID INT AUTO_INCREMENT PRIMARY KEY,
    ISS_NAME VARCHAR(100),
    FISCAL_YEAR INT,
    ISS_DATA TEXT,
    CREATED_DATETIME TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Create DT_AMS_FEM table
CREATE TABLE IF NOT EXISTS DT_AMS_FEM (
    AMS_ID INT AUTO_INCREMENT PRIMARY KEY,
    AMS_NAME VARCHAR(100),
    FISCAL_YEAR INT,
    AMS_DATA TEXT,
    CREATED_DATETIME TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Create LOOKUP_JCA table
CREATE TABLE IF NOT EXISTS LOOKUP_JCA (
    JCA_ID INT AUTO_INCREMENT PRIMARY KEY,
    JCA_CODE VARCHAR(50),
    JCA_NAME VARCHAR(100),
    IS_ACTIVE BOOLEAN DEFAULT TRUE,
    CREATED_DATETIME TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Create LOOKUP_PROGRAM_DETAIL table
CREATE TABLE IF NOT EXISTS LOOKUP_PROGRAM_DETAIL (
    id INT AUTO_INCREMENT PRIMARY KEY,
    PROGRAM_ID INT,
    PROGRAM_CODE VARCHAR(50),
    PROGRAM_NAME VARCHAR(100),
    DETAIL_DESCRIPTION TEXT,
    IS_ACTIVE BOOLEAN DEFAULT TRUE,
    CREATED_DATETIME TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Create USR_LOOKUP_USER_SHARED_COA table
CREATE TABLE IF NOT EXISTS USR_LOOKUP_USER_SHARED_COA (
    id INT AUTO_INCREMENT PRIMARY KEY,
    ORIGINAL_USER_ID INT,
    NEW_USER_ID INT,
    ORIGINAL_COA_ID INT,
    NEW_COA_ID INT,
    IS_REVOKED BOOLEAN DEFAULT FALSE,
    CREATED_DATETIME TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Create processing_logs table
CREATE TABLE IF NOT EXISTS processing_logs (
    id INT AUTO_INCREMENT PRIMARY KEY,
    upload_id INT,
    log_level VARCHAR(20),
    message TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Create USR_DT_UPLOADS table (without foreign key constraints)
CREATE TABLE IF NOT EXISTS USR_DT_UPLOADS (
    USR_DT_UPLOADS_ID INT AUTO_INCREMENT PRIMARY KEY,
    TYPE ENUM('DOCUMENT', 'DATABASE', 'PROGRAM_ALIGNMENT', 'FUNDING', 'METADATA') NOT NULL,
    CYCLE_ID INT NOT NULL,
    S3_PATH VARCHAR(500) NOT NULL,
    FILE_NAME VARCHAR(255) NOT NULL,
    VERSION VARCHAR(20) DEFAULT '1.0',
    TITLE VARCHAR(255),
    DESCRIPTION TEXT,
    USER_ID INT NOT NULL,
    FILE_STATUS ENUM('NEW', 'PROCESSING', 'COMPLETED', 'ERROR', 'CANCELLED', 'DELETED') DEFAULT 'NEW',
    FILE_SIZE BIGINT,
    MIME_TYPE VARCHAR(100),
    CREATED_TIMESTAMP TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_TIMESTAMP TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    INDEX idx_cycle_type (CYCLE_ID, TYPE),
    INDEX idx_user_status (USER_ID, FILE_STATUS),
    INDEX idx_created (CREATED_TIMESTAMP)
);

-- Create processing_pipeline table
CREATE TABLE IF NOT EXISTS processing_pipeline (
    id INT AUTO_INCREMENT PRIMARY KEY,
    upload_type ENUM('DOCUMENT', 'DATABASE', 'PROGRAM_ALIGNMENT', 'FUNDING', 'METADATA') NOT NULL,
    status ENUM('PENDING', 'PROCESSING', 'COMPLETED', 'FAILED') DEFAULT 'PENDING',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

-- Create pipeline_mapping table
CREATE TABLE IF NOT EXISTS pipeline_mapping (
    id INT AUTO_INCREMENT PRIMARY KEY,
    pipeline_id INT NOT NULL,
    upload_id INT NOT NULL,
    upload_type ENUM('DOCUMENT', 'DATABASE', 'PROGRAM_ALIGNMENT', 'FUNDING', 'METADATA') NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Create git_tracking table
CREATE TABLE IF NOT EXISTS git_tracking (
    id INT AUTO_INCREMENT PRIMARY KEY,
    data_type ENUM('UPLOAD_FILE', 'PROCESSING_RESULT', 'METADATA_UPDATE') NOT NULL,
    reference_id INT NOT NULL,
    user_id INT NOT NULL,
    git_hash VARCHAR(40),
    git_message TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Create document_metadata table
CREATE TABLE IF NOT EXISTS document_metadata (
    id INT AUTO_INCREMENT PRIMARY KEY,
    upload_id INT NOT NULL,
    metadata_key VARCHAR(100) NOT NULL,
    metadata_value TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    INDEX idx_upload_key (upload_id, metadata_key)
);

-- Add missing columns to existing tables if they don't exist
-- Add COA_ID, COA_NAME, BUDGET_AMOUNT to RESOURCE_CONSTRAINED_COA_2025
SET @sql = (SELECT IF(
    (SELECT COUNT(*) FROM INFORMATION_SCHEMA.COLUMNS 
     WHERE TABLE_SCHEMA = 'SOCOM_UI' 
     AND TABLE_NAME = 'RESOURCE_CONSTRAINED_COA_2025' 
     AND COLUMN_NAME = 'COA_ID') = 0,
    'ALTER TABLE RESOURCE_CONSTRAINED_COA_2025 ADD COLUMN COA_ID INT FIRST',
    'SELECT "COA_ID column already exists"'
));
PREPARE stmt FROM @sql;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;

SET @sql = (SELECT IF(
    (SELECT COUNT(*) FROM INFORMATION_SCHEMA.COLUMNS 
     WHERE TABLE_SCHEMA = 'SOCOM_UI' 
     AND TABLE_NAME = 'RESOURCE_CONSTRAINED_COA_2025' 
     AND COLUMN_NAME = 'COA_NAME') = 0,
    'ALTER TABLE RESOURCE_CONSTRAINED_COA_2025 ADD COLUMN COA_NAME VARCHAR(100) AFTER COA_ID',
    'SELECT "COA_NAME column already exists"'
));
PREPARE stmt FROM @sql;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;

SET @sql = (SELECT IF(
    (SELECT COUNT(*) FROM INFORMATION_SCHEMA.COLUMNS 
     WHERE TABLE_SCHEMA = 'SOCOM_UI' 
     AND TABLE_NAME = 'RESOURCE_CONSTRAINED_COA_2025' 
     AND COLUMN_NAME = 'BUDGET_AMOUNT') = 0,
    'ALTER TABLE RESOURCE_CONSTRAINED_COA_2025 ADD COLUMN BUDGET_AMOUNT DECIMAL(15,2) AFTER FISCAL_YEAR',
    'SELECT "BUDGET_AMOUNT column already exists"'
));
PREPARE stmt FROM @sql;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;

-- Add SUMMARY_DATA to POM_SUMMARY_2025
SET @sql = (SELECT IF(
    (SELECT COUNT(*) FROM INFORMATION_SCHEMA.COLUMNS 
     WHERE TABLE_SCHEMA = 'SOCOM_UI' 
     AND TABLE_NAME = 'POM_SUMMARY_2025' 
     AND COLUMN_NAME = 'SUMMARY_DATA') = 0,
    'ALTER TABLE POM_SUMMARY_2025 ADD COLUMN SUMMARY_DATA TEXT AFTER id',
    'SELECT "SUMMARY_DATA column already exists"'
));
PREPARE stmt FROM @sql;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;

-- Show all tables created
SHOW TABLES;
