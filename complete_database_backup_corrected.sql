-- Complete Database Backup for SOCOM Application (Corrected)
-- This file contains all the database schema and data changes made during development fixes
-- Generated on: $(date)

-- Database: SOCOM_UI
USE SOCOM_UI;

-- =====================================================
-- TABLE STRUCTURES
-- =====================================================

-- USR_DT_UPLOADS table (renamed from usr_dt_uploads and enhanced)
DROP TABLE IF EXISTS USR_DT_UPLOADS;
CREATE TABLE USR_DT_UPLOADS (
    USR_DT_UPLOADS_ID INT AUTO_INCREMENT PRIMARY KEY,
    ID INT,
    TYPE ENUM('DOCUMENT', 'DATABASE', 'PROGRAM_ALIGNMENT', 'FUNDING', 'METADATA') NOT NULL,
    CYCLE_ID INT NOT NULL,
    S3_PATH VARCHAR(500) NOT NULL,
    FILE_NAME VARCHAR(255) NOT NULL,
    VERSION VARCHAR(20) DEFAULT '1.0',
    TITLE VARCHAR(255),
    DESCRIPTION TEXT,
    USER_ID INT NOT NULL,
    UPDATE_USER_ID INT DEFAULT NULL,
    FILE_STATUS ENUM('NEW', 'PROCESSING', 'COMPLETED', 'ERROR', 'CANCELLED', 'DELETED') DEFAULT 'NEW',
    FILE_SIZE BIGINT,
    MIME_TYPE VARCHAR(100),
    CREATED_TIMESTAMP TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_TIMESTAMP TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    INDEX idx_cycle_type (CYCLE_ID, TYPE),
    INDEX idx_user_status (USER_ID, FILE_STATUS),
    INDEX idx_created (CREATED_TIMESTAMP)
);

-- USR_DT_SCHEDULER_MAP table (created for upload processing)
DROP TABLE IF EXISTS USR_DT_SCHEDULER_MAP;
CREATE TABLE USR_DT_SCHEDULER_MAP (
    MAP_ID INT NOT NULL,
    DT_SCHEDULER_ID INT NOT NULL,
    PRIMARY KEY (MAP_ID, DT_SCHEDULER_ID)
);

-- USR_DT_SCHEDULER table (created for upload processing)
DROP TABLE IF EXISTS USR_DT_SCHEDULER;
CREATE TABLE USR_DT_SCHEDULER (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    CYCLE_ID INT NOT NULL,
    CRON_STATUS ENUM('NEW', 'PROCESSING', 'COMPLETED', 'ERROR', 'CANCELLED') DEFAULT 'NEW',
    CRON_PROCESSED BOOLEAN DEFAULT FALSE,
    ERRORS TEXT,
    CREATED_TIMESTAMP TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_TIMESTAMP TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

-- USR_LOOKUP_SAVED_COA table (created for COA management)
DROP TABLE IF EXISTS USR_LOOKUP_SAVED_COA;
CREATE TABLE USR_LOOKUP_SAVED_COA (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    USER_ID INT NOT NULL,
    SAVED_COA_ID INT NOT NULL,
    CRITERIA_NAME_ID INT NOT NULL,
    COA_TITLE VARCHAR(255),
    COA_DESCRIPTION TEXT,
    COA_TYPE ENUM('ISS', 'ISS_EXTRACT', 'RC_T') DEFAULT 'ISS',
    STATE ENUM('ACTIVE', 'INACTIVE') DEFAULT 'ACTIVE',
    CREATED_DATETIME TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_DATETIME TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

-- USR_LOOKUP_USER_SAVED_COA table (created for COA management)
DROP TABLE IF EXISTS USR_LOOKUP_USER_SAVED_COA;
CREATE TABLE USR_LOOKUP_USER_SAVED_COA (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    USER_ID INT NOT NULL,
    SAVED_COA_ID INT NOT NULL,
    CRITERIA_NAME_ID INT NOT NULL,
    COA_TITLE VARCHAR(255),
    COA_DESCRIPTION TEXT,
    COA_TYPE ENUM('ISS', 'ISS_EXTRACT', 'RC_T') DEFAULT 'ISS',
    STATE ENUM('ACTIVE', 'INACTIVE') DEFAULT 'ACTIVE',
    CREATED_DATETIME TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_DATETIME TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

-- USR_LOOKUP_USER_SHARED_COA table (created for COA management)
DROP TABLE IF EXISTS USR_LOOKUP_USER_SHARED_COA;
CREATE TABLE USR_LOOKUP_USER_SHARED_COA (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    ORIGINAL_USER_ID INT NOT NULL,
    NEW_USER_ID INT NOT NULL,
    ORIGINAL_COA_ID INT NOT NULL,
    NEW_COA_ID INT NOT NULL,
    IS_REVOKED BOOLEAN DEFAULT FALSE,
    CREATED_DATETIME TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_DATETIME TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

-- USR_EVENT_FUNDING_LINES table (created for event summary)
DROP TABLE IF EXISTS USR_EVENT_FUNDING_LINES;
CREATE TABLE USR_EVENT_FUNDING_LINES (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    EVENT_NAME VARCHAR(255) NOT NULL,
    FISCAL_YEAR INT NOT NULL,
    FUNDING_AMOUNT DECIMAL(15,2) DEFAULT 0.00,
    AD_CONSENSUS ENUM('Approve', 'Approve at Scale', 'Disapprove') DEFAULT 'Approve',
    ASSESSMENT_AREA_CODE VARCHAR(10) DEFAULT 'A',
    CAPABILITY_SPONSOR_CODE VARCHAR(50),
    CREATED_DATETIME TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_DATETIME TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

-- =====================================================
-- COLUMN ADDITIONS (using proper MySQL syntax)
-- =====================================================

-- Add ASSESSMENT_AREA_CODE to ISS_SUMMARY tables if they don't exist
SET @sql = (SELECT IF(
    (SELECT COUNT(*) FROM INFORMATION_SCHEMA.COLUMNS 
     WHERE TABLE_SCHEMA = 'SOCOM_UI' 
     AND TABLE_NAME = 'ISS_SUMMARY_2024' 
     AND COLUMN_NAME = 'ASSESSMENT_AREA_CODE') = 0,
    'ALTER TABLE ISS_SUMMARY_2024 ADD COLUMN ASSESSMENT_AREA_CODE VARCHAR(10) DEFAULT "A"',
    'SELECT "ASSESSMENT_AREA_CODE column already exists in ISS_SUMMARY_2024"'
));
PREPARE stmt FROM @sql;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;

SET @sql = (SELECT IF(
    (SELECT COUNT(*) FROM INFORMATION_SCHEMA.COLUMNS 
     WHERE TABLE_SCHEMA = 'SOCOM_UI' 
     AND TABLE_NAME = 'ISS_SUMMARY_2025' 
     AND COLUMN_NAME = 'ASSESSMENT_AREA_CODE') = 0,
    'ALTER TABLE ISS_SUMMARY_2025 ADD COLUMN ASSESSMENT_AREA_CODE VARCHAR(10) DEFAULT "A"',
    'SELECT "ASSESSMENT_AREA_CODE column already exists in ISS_SUMMARY_2025"'
));
PREPARE stmt FROM @sql;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;

-- Add ASSESSMENT_AREA_CODE to ZBT_SUMMARY tables if they don't exist
SET @sql = (SELECT IF(
    (SELECT COUNT(*) FROM INFORMATION_SCHEMA.COLUMNS 
     WHERE TABLE_SCHEMA = 'SOCOM_UI' 
     AND TABLE_NAME = 'ZBT_SUMMARY_2024' 
     AND COLUMN_NAME = 'ASSESSMENT_AREA_CODE') = 0,
    'ALTER TABLE ZBT_SUMMARY_2024 ADD COLUMN ASSESSMENT_AREA_CODE VARCHAR(10) DEFAULT "A"',
    'SELECT "ASSESSMENT_AREA_CODE column already exists in ZBT_SUMMARY_2024"'
));
PREPARE stmt FROM @sql;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;

SET @sql = (SELECT IF(
    (SELECT COUNT(*) FROM INFORMATION_SCHEMA.COLUMNS 
     WHERE TABLE_SCHEMA = 'SOCOM_UI' 
     AND TABLE_NAME = 'ZBT_SUMMARY_2025' 
     AND COLUMN_NAME = 'ASSESSMENT_AREA_CODE') = 0,
    'ALTER TABLE ZBT_SUMMARY_2025 ADD COLUMN ASSESSMENT_AREA_CODE VARCHAR(10) DEFAULT "A"',
    'SELECT "ASSESSMENT_AREA_CODE column already exists in ZBT_SUMMARY_2025"'
));
PREPARE stmt FROM @sql;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;

-- Add ASSESSMENT_AREA to LOOKUP_ASSESSMENT_AREA if it doesn't exist
SET @sql = (SELECT IF(
    (SELECT COUNT(*) FROM INFORMATION_SCHEMA.COLUMNS 
     WHERE TABLE_SCHEMA = 'SOCOM_UI' 
     AND TABLE_NAME = 'LOOKUP_ASSESSMENT_AREA' 
     AND COLUMN_NAME = 'ASSESSMENT_AREA') = 0,
    'ALTER TABLE LOOKUP_ASSESSMENT_AREA ADD COLUMN ASSESSMENT_AREA VARCHAR(100)',
    'SELECT "ASSESSMENT_AREA column already exists in LOOKUP_ASSESSMENT_AREA"'
));
PREPARE stmt FROM @sql;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;

SET @sql = (SELECT IF(
    (SELECT COUNT(*) FROM INFORMATION_SCHEMA.COLUMNS 
     WHERE TABLE_SCHEMA = 'SOCOM_UI' 
     AND TABLE_NAME = 'LOOKUP_ASSESSMENT_AREA' 
     AND COLUMN_NAME = 'ASSESSMENT_AREA_CODE') = 0,
    'ALTER TABLE LOOKUP_ASSESSMENT_AREA ADD COLUMN ASSESSMENT_AREA_CODE VARCHAR(10)',
    'SELECT "ASSESSMENT_AREA_CODE column already exists in LOOKUP_ASSESSMENT_AREA"'
));
PREPARE stmt FROM @sql;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;

-- Add RESOURCE_CATEGORY columns to LOOKUP_RESOURCE_CATEGORY if they don't exist
SET @sql = (SELECT IF(
    (SELECT COUNT(*) FROM INFORMATION_SCHEMA.COLUMNS 
     WHERE TABLE_SCHEMA = 'SOCOM_UI' 
     AND TABLE_NAME = 'LOOKUP_RESOURCE_CATEGORY' 
     AND COLUMN_NAME = 'RESOURCE_CATEGORY_CODE') = 0,
    'ALTER TABLE LOOKUP_RESOURCE_CATEGORY ADD COLUMN RESOURCE_CATEGORY_CODE VARCHAR(20)',
    'SELECT "RESOURCE_CATEGORY_CODE column already exists in LOOKUP_RESOURCE_CATEGORY"'
));
PREPARE stmt FROM @sql;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;

SET @sql = (SELECT IF(
    (SELECT COUNT(*) FROM INFORMATION_SCHEMA.COLUMNS 
     WHERE TABLE_SCHEMA = 'SOCOM_UI' 
     AND TABLE_NAME = 'LOOKUP_RESOURCE_CATEGORY' 
     AND COLUMN_NAME = 'RESOURCE_CATEGORY') = 0,
    'ALTER TABLE LOOKUP_RESOURCE_CATEGORY ADD COLUMN RESOURCE_CATEGORY VARCHAR(100)',
    'SELECT "RESOURCE_CATEGORY column already exists in LOOKUP_RESOURCE_CATEGORY"'
));
PREPARE stmt FROM @sql;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;

-- =====================================================
-- SEED DATA
-- =====================================================

-- Populate USR_SITE_USERS
INSERT IGNORE INTO USR_SITE_USERS (USER_ID, `GROUP`, IS_DELETED) VALUES
(1, 'ADMIN', 0),
(2, 'USER', 0),
(3, 'POM_ADMIN', 0),
(4, 'AO_USER', 0),
(5, 'AD_USER', 0);

-- Populate USR_ADMIN_USERS
INSERT IGNORE INTO USR_ADMIN_USERS (USER_ID, ADMIN_LEVEL, IS_ACTIVE) VALUES
(1, 'SUPER_ADMIN', 1),
(2, 'ADMIN', 1),
(3, 'CYCLE_ADMIN', 1);

-- Populate USR_CAP_USERS
INSERT IGNORE INTO USR_CAP_USERS (USER_ID, `GROUP`, IS_DELETED) VALUES
(1, 'SORDAC', 0),
(2, 'USSOCOM', 0),
(3, 'NSWC', 0),
(4, 'USASOC', 0),
(5, 'AFSOC', 0);

-- Populate USR_AO_AD_USERS
INSERT IGNORE INTO USR_AO_AD_USERS (USER_ID, `GROUP`, IS_DELETED) VALUES
(1, 'AO', 0),
(2, 'AD', 0),
(3, 'AO_AD', 0);

-- Populate USR_LOOKUP_USER_CRITERIA_NAME
INSERT IGNORE INTO USR_LOOKUP_USER_CRITERIA_NAME (USER_ID, CRITERIA_NAME, CRITERIA_DESCRIPTION, IS_ACTIVE, CREATED_DATETIME) VALUES
(1, 'Default Criteria', 'Default criteria for COA management', 1, NOW()),
(2, 'Test Criteria', 'Test criteria for development', 1, NOW());

-- Populate USR_LOOKUP_USER_CRITERIA_TERMS
INSERT IGNORE INTO USR_LOOKUP_USER_CRITERIA_TERMS (CRITERIA_NAME_ID, TERM_NAME, TERM_VALUE, IS_ACTIVE, CREATED_DATETIME) VALUES
(1, 'FISCAL_YEAR', '2024', 1, NOW()),
(1, 'ASSESSMENT_AREA', 'A', 1, NOW()),
(2, 'FISCAL_YEAR', '2025', 1, NOW()),
(2, 'ASSESSMENT_AREA', 'B', 1, NOW());

-- Populate USR_OPTION_SCORES
INSERT IGNORE INTO USR_OPTION_SCORES (USER_ID, OPTION_NAME, SCORE_VALUE, SCORE_TYPE, IS_ACTIVE, CREATED_DATETIME) VALUES
(1, 'Option A', 85.5, 'PERCENTAGE', 1, NOW()),
(1, 'Option B', 92.3, 'PERCENTAGE', 1, NOW()),
(2, 'Option C', 78.9, 'PERCENTAGE', 1, NOW());

-- Populate USR_ZBT_AD_SAVES
INSERT IGNORE INTO USR_ZBT_AD_SAVES (USER_ID, ZBT_DATA, SAVE_NAME, IS_ACTIVE, CREATED_DATETIME) VALUES
(1, '{"fiscal_year": "2024", "data": "sample"}', 'Test ZBT Save', 1, NOW()),
(2, '{"fiscal_year": "2025", "data": "sample"}', 'Another ZBT Save', 1, NOW());

-- Populate USR_ZBT_AO_SAVES
INSERT IGNORE INTO USR_ZBT_AO_SAVES (USER_ID, ZBT_DATA, SAVE_NAME, IS_ACTIVE, CREATED_DATETIME) VALUES
(1, '{"fiscal_year": "2024", "data": "sample"}', 'Test ZBT AO Save', 1, NOW()),
(2, '{"fiscal_year": "2025", "data": "sample"}', 'Another ZBT AO Save', 1, NOW());

-- Populate USR_ISSUE_AD_SAVES
INSERT IGNORE INTO USR_ISSUE_AD_SAVES (USER_ID, ISSUE_DATA, SAVE_NAME, IS_ACTIVE, CREATED_DATETIME) VALUES
(1, '{"fiscal_year": "2024", "data": "sample"}', 'Test Issue Save', 1, NOW()),
(2, '{"fiscal_year": "2025", "data": "sample"}', 'Another Issue Save', 1, NOW());

-- Populate USR_ISSUE_AO_SAVES
INSERT IGNORE INTO USR_ISSUE_AO_SAVES (USER_ID, ISSUE_DATA, SAVE_NAME, IS_ACTIVE, CREATED_DATETIME) VALUES
(1, '{"fiscal_year": "2024", "data": "sample"}', 'Test Issue AO Save', 1, NOW()),
(2, '{"fiscal_year": "2025", "data": "sample"}', 'Another Issue AO Save', 1, NOW());

-- Populate USR_ISSUE_AD_FINAL_SAVES
INSERT IGNORE INTO USR_ISSUE_AD_FINAL_SAVES (USER_ID, ISSUE_DATA, SAVE_NAME, IS_ACTIVE, CREATED_DATETIME) VALUES
(1, '{"fiscal_year": "2024", "data": "sample"}', 'Test Final Issue Save', 1, NOW()),
(2, '{"fiscal_year": "2025", "data": "sample"}', 'Another Final Issue Save', 1, NOW());

-- Populate LOOKUP_SPONSOR with missing sponsors
INSERT IGNORE INTO LOOKUP_SPONSOR (SPONSOR_CODE, SPONSOR_NAME, SPONSOR_TYPE, ACTIVE) VALUES
('SORDAC', 'Special Operations Research Development and Acquisition Center', 'CAPABILITY', 1),
('USSOCOM', 'United States Special Operations Command', 'CAPABILITY', 1),
('NSWC', 'Naval Surface Warfare Center', 'CAPABILITY', 1),
('USASOC', 'United States Army Special Operations Command', 'CAPABILITY', 1),
('AFSOC', 'Air Force Special Operations Command', 'CAPABILITY', 1);

-- Populate LOOKUP_ASSESSMENT_AREA with missing areas
INSERT IGNORE INTO LOOKUP_ASSESSMENT_AREA (AREA_CODE, AREA_NAME, ACTIVE) VALUES
('A', 'Acquisition', 1),
('B', 'Operations', 1),
('C', 'Research', 1),
('D', 'Technology', 1),
('E', 'Training', 1);

-- Populate LOOKUP_RESOURCE_CATEGORY with missing categories
INSERT IGNORE INTO LOOKUP_RESOURCE_CATEGORY (CATEGORY_CODE, CATEGORY_NAME, ACTIVE) VALUES
('RC001', 'Acquisition', 1),
('RC002', 'Operations', 1),
('RC003', 'Operational Support', 1),
('RC004', 'R&D Programs', 1),
('RC005', 'Technology Development', 1);

-- Populate LOOKUP_PROGRAM with missing programs
INSERT IGNORE INTO LOOKUP_PROGRAM (PROGRAM_CODE, PROGRAM_NAME, PROGRAM_GROUP, CAPABILITY_SPONSOR_CODE, ASSESSMENT_AREA_CODE) VALUES
('PROG001', 'Special Operations Capability Enhancement', 'CAPABILITY', 'SORDAC', 'A'),
('PROG002', 'Counter-Terrorism Operations Support', 'OPERATIONS', 'USSOCOM', 'B'),
('PROG003', 'Technology Development Program', 'TECHNOLOGY', 'NSWC', 'C'),
('PROG004', 'Training and Readiness', 'TRAINING', 'USASOC', 'E'),
('PROG005', 'Intelligence Support', 'INTELLIGENCE', 'AFSOC', 'C'),
('PROG006', 'Communications Infrastructure', 'TECHNOLOGY', 'USSOCOM', 'D'),
('PROG007', 'Medical Support', 'SUPPORT', 'SORDAC', 'B'),
('PROG008', 'Logistics Support', 'SUPPORT', 'USASOC', 'B');

-- Populate ISS_SUMMARY tables with sample data (using actual structure)
INSERT IGNORE INTO ISS_SUMMARY_2024 (CAPABILITY_SPONSOR_CODE, EVENT_NAME, DELTA_AMT, FISCAL_YEAR, PROGRAM_NAME, RESOURCE_CATEGORY_CODE, EXECUTION_MANAGER_CODE, PROGRAM_CODE, PROGRAM_GROUP, ASSESSMENT_AREA_CODE) VALUES
('SORDAC', 'ISS Event 001', 1000000.00, 2024, 'ISS Program 001', 'RESEARCH_DEV', 'EM001', 'PROG001', 'RESEARCH', 'A'),
('USSOCOM', 'ISS Event 002', 2000000.00, 2024, 'ISS Program 002', 'ACQUISITION', 'EM002', 'PROG002', 'ACQUISITION', 'B'),
('NSWC', 'ISS Event 003', 500000.00, 2024, 'ISS Program 003', 'TECHNOLOGY', 'EM003', 'PROG003', 'TECHNOLOGY', 'C');

INSERT IGNORE INTO ISS_SUMMARY_2025 (CAPABILITY_SPONSOR_CODE, EVENT_NAME, DELTA_AMT, FISCAL_YEAR, PROGRAM_NAME, RESOURCE_CATEGORY_CODE, EXECUTION_MANAGER_CODE, PROGRAM_CODE, PROGRAM_GROUP, ASSESSMENT_AREA_CODE) VALUES
('SORDAC', 'ISS Event 001 FY25', 1100000.00, 2025, 'ISS Program 001 FY25', 'RESEARCH_DEV', 'EM001', 'PROG001', 'RESEARCH', 'A'),
('USSOCOM', 'ISS Event 002 FY25', 2200000.00, 2025, 'ISS Program 002 FY25', 'ACQUISITION', 'EM002', 'PROG002', 'ACQUISITION', 'B'),
('NSWC', 'ISS Event 003 FY25', 550000.00, 2025, 'ISS Program 003 FY25', 'TECHNOLOGY', 'EM003', 'PROG003', 'TECHNOLOGY', 'C');

-- Populate ZBT_SUMMARY tables with sample data (using actual structure)
INSERT IGNORE INTO ZBT_SUMMARY_2024 (CAPABILITY_SPONSOR_CODE, EVENT_NAME, DELTA_AMT, FISCAL_YEAR, PROGRAM_NAME, RESOURCE_CATEGORY_CODE, EXECUTION_MANAGER_CODE, PROGRAM_CODE, PROGRAM_GROUP, ASSESSMENT_AREA_CODE) VALUES
('SORDAC', 'ZBT Event 001', 800000.00, 2024, 'ZBT Program 001', 'RESEARCH_DEV', 'EM001', 'PROG001', 'RESEARCH', 'A'),
('USSOCOM', 'ZBT Event 002', 1500000.00, 2024, 'ZBT Program 002', 'ACQUISITION', 'EM002', 'PROG002', 'ACQUISITION', 'B'),
('NSWC', 'ZBT Event 003', 400000.00, 2024, 'ZBT Program 003', 'TECHNOLOGY', 'EM003', 'PROG003', 'TECHNOLOGY', 'C');

INSERT IGNORE INTO ZBT_SUMMARY_2025 (CAPABILITY_SPONSOR_CODE, EVENT_NAME, DELTA_AMT, FISCAL_YEAR, PROGRAM_NAME, RESOURCE_CATEGORY_CODE, EXECUTION_MANAGER_CODE, PROGRAM_CODE, PROGRAM_GROUP, ASSESSMENT_AREA_CODE) VALUES
('SORDAC', 'ZBT Event 001 FY25', 880000.00, 2025, 'ZBT Program 001 FY25', 'RESEARCH_DEV', 'EM001', 'PROG001', 'RESEARCH', 'A'),
('USSOCOM', 'ZBT Event 002 FY25', 1650000.00, 2025, 'ZBT Program 002 FY25', 'ACQUISITION', 'EM002', 'PROG002', 'ACQUISITION', 'B'),
('NSWC', 'ZBT Event 003 FY25', 440000.00, 2025, 'ZBT Program 003 FY25', 'TECHNOLOGY', 'EM003', 'PROG003', 'TECHNOLOGY', 'C');

-- Populate USR_EVENT_FUNDING_LINES with sample data
INSERT IGNORE INTO USR_EVENT_FUNDING_LINES (EVENT_NAME, FISCAL_YEAR, FUNDING_AMOUNT, AD_CONSENSUS, ASSESSMENT_AREA_CODE, CAPABILITY_SPONSOR_CODE) VALUES
('EVENT_001', 2024, 1000000.00, 'Approve', 'A', 'SORDAC'),
('EVENT_002', 2024, 2000000.00, 'Approve at Scale', 'B', 'USSOCOM'),
('EVENT_003', 2024, 500000.00, 'Disapprove', 'C', 'NSWC'),
('EVENT_001', 2025, 1100000.00, 'Approve', 'A', 'SORDAC'),
('EVENT_002', 2025, 2200000.00, 'Approve at Scale', 'B', 'USSOCOM'),
('EVENT_003', 2025, 550000.00, 'Disapprove', 'C', 'NSWC');

-- =====================================================
-- INDEXES FOR PERFORMANCE
-- =====================================================

-- Create indexes for better performance (using proper MySQL syntax)
SET @sql = (SELECT IF(
    (SELECT COUNT(*) FROM INFORMATION_SCHEMA.STATISTICS 
     WHERE TABLE_SCHEMA = 'SOCOM_UI' 
     AND TABLE_NAME = 'USR_DT_UPLOADS' 
     AND INDEX_NAME = 'idx_usr_dt_uploads_user_type') = 0,
    'CREATE INDEX idx_usr_dt_uploads_user_type ON USR_DT_UPLOADS(USER_ID, TYPE)',
    'SELECT "Index idx_usr_dt_uploads_user_type already exists"'
));
PREPARE stmt FROM @sql;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;

SET @sql = (SELECT IF(
    (SELECT COUNT(*) FROM INFORMATION_SCHEMA.STATISTICS 
     WHERE TABLE_SCHEMA = 'SOCOM_UI' 
     AND TABLE_NAME = 'USR_DT_UPLOADS' 
     AND INDEX_NAME = 'idx_usr_dt_uploads_status') = 0,
    'CREATE INDEX idx_usr_dt_uploads_status ON USR_DT_UPLOADS(FILE_STATUS)',
    'SELECT "Index idx_usr_dt_uploads_status already exists"'
));
PREPARE stmt FROM @sql;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;

SET @sql = (SELECT IF(
    (SELECT COUNT(*) FROM INFORMATION_SCHEMA.STATISTICS 
     WHERE TABLE_SCHEMA = 'SOCOM_UI' 
     AND TABLE_NAME = 'USR_DT_SCHEDULER' 
     AND INDEX_NAME = 'idx_usr_dt_scheduler_status') = 0,
    'CREATE INDEX idx_usr_dt_scheduler_status ON USR_DT_SCHEDULER(CRON_STATUS)',
    'SELECT "Index idx_usr_dt_scheduler_status already exists"'
));
PREPARE stmt FROM @sql;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;

SET @sql = (SELECT IF(
    (SELECT COUNT(*) FROM INFORMATION_SCHEMA.STATISTICS 
     WHERE TABLE_SCHEMA = 'SOCOM_UI' 
     AND TABLE_NAME = 'USR_DT_SCHEDULER' 
     AND INDEX_NAME = 'idx_usr_dt_scheduler_cycle') = 0,
    'CREATE INDEX idx_usr_dt_scheduler_cycle ON USR_DT_SCHEDULER(CYCLE_ID)',
    'SELECT "Index idx_usr_dt_scheduler_cycle already exists"'
));
PREPARE stmt FROM @sql;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;

SET @sql = (SELECT IF(
    (SELECT COUNT(*) FROM INFORMATION_SCHEMA.STATISTICS 
     WHERE TABLE_SCHEMA = 'SOCOM_UI' 
     AND TABLE_NAME = 'USR_EVENT_FUNDING_LINES' 
     AND INDEX_NAME = 'idx_event_funding_event') = 0,
    'CREATE INDEX idx_event_funding_event ON USR_EVENT_FUNDING_LINES(EVENT_NAME)',
    'SELECT "Index idx_event_funding_event already exists"'
));
PREPARE stmt FROM @sql;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;

SET @sql = (SELECT IF(
    (SELECT COUNT(*) FROM INFORMATION_SCHEMA.STATISTICS 
     WHERE TABLE_SCHEMA = 'SOCOM_UI' 
     AND TABLE_NAME = 'USR_EVENT_FUNDING_LINES' 
     AND INDEX_NAME = 'idx_event_funding_year') = 0,
    'CREATE INDEX idx_event_funding_year ON USR_EVENT_FUNDING_LINES(FISCAL_YEAR)',
    'SELECT "Index idx_event_funding_year already exists"'
));
PREPARE stmt FROM @sql;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;

-- =====================================================
-- COMMIT CHANGES
-- =====================================================

COMMIT;

-- =====================================================
-- VERIFICATION QUERIES
-- =====================================================

-- Verify table counts
SELECT 'USR_DT_UPLOADS' as table_name, COUNT(*) as count FROM USR_DT_UPLOADS
UNION ALL
SELECT 'USR_DT_SCHEDULER', COUNT(*) FROM USR_DT_SCHEDULER
UNION ALL
SELECT 'USR_DT_SCHEDULER_MAP', COUNT(*) FROM USR_DT_SCHEDULER_MAP
UNION ALL
SELECT 'USR_EVENT_FUNDING_LINES', COUNT(*) FROM USR_EVENT_FUNDING_LINES
UNION ALL
SELECT 'USR_SITE_USERS', COUNT(*) FROM USR_SITE_USERS
UNION ALL
SELECT 'USR_ADMIN_USERS', COUNT(*) FROM USR_ADMIN_USERS
UNION ALL
SELECT 'USR_CAP_USERS', COUNT(*) FROM USR_CAP_USERS
UNION ALL
SELECT 'LOOKUP_SPONSOR', COUNT(*) FROM LOOKUP_SPONSOR
UNION ALL
SELECT 'LOOKUP_ASSESSMENT_AREA', COUNT(*) FROM LOOKUP_ASSESSMENT_AREA
UNION ALL
SELECT 'LOOKUP_RESOURCE_CATEGORY', COUNT(*) FROM LOOKUP_RESOURCE_CATEGORY
UNION ALL
SELECT 'LOOKUP_PROGRAM', COUNT(*) FROM LOOKUP_PROGRAM;

-- Verify column additions
SELECT 'ISS_SUMMARY_2024' as table_name, COUNT(*) as count FROM ISS_SUMMARY_2024 WHERE ASSESSMENT_AREA_CODE IS NOT NULL
UNION ALL
SELECT 'ISS_SUMMARY_2025', COUNT(*) FROM ISS_SUMMARY_2025 WHERE ASSESSMENT_AREA_CODE IS NOT NULL
UNION ALL
SELECT 'ZBT_SUMMARY_2024', COUNT(*) FROM ZBT_SUMMARY_2024 WHERE ASSESSMENT_AREA_CODE IS NOT NULL
UNION ALL
SELECT 'ZBT_SUMMARY_2025', COUNT(*) FROM ZBT_SUMMARY_2025 WHERE ASSESSMENT_AREA_CODE IS NOT NULL;
