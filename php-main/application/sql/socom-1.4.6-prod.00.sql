CREATE TABLE IF NOT EXISTS `USR_ISSUE_AD_FINAL_SAVES_HISTORY` (
  `ID` int NOT NULL AUTO_INCREMENT,
  `ISSUE_AD_ID` int NOT NULL,
  `AD_RECOMENDATION` VARCHAR(100) DEFAULT NULL,
  `AD_USER_ID` int DEFAULT NULL,
  `CREATED_DATETIME` datetime NOT NULL,
  `UPDATED_DATETIME` datetime DEFAULT NULL,
  `EVENT_NAME` varchar(100) DEFAULT NULL,
  `POM_ID` int NOT NULL DEFAULT '1',
  `IS_DELETED` tinyint NOT NULL DEFAULT '0',
  `HISTORY_DATETIME` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`ID`),
  KEY `idx_program_id_eoc_code` (`EVENT_NAME`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

CREATE TABLE IF NOT EXISTS `USR_EVENT_FUNDING_LINES_HISTORY` (
  `ID` int NOT NULL AUTO_INCREMENT,
  `USR_EVENT_FUNDING_LINES_ID` int NOT NULL,
  `EVENT_NAME` varchar(100) NOT NULL,
  `CYCLE_ID` int NOT NULL,
  `CRITERIA_NAME_ID` int NOT NULL,
  `POM_ID` int NOT NULL,
  `POM_POSITION` varchar(30) NOT NULL,
  `FY_1` int NOT NULL DEFAULT '0',
  `FY_2` int NOT NULL DEFAULT '0',
  `FY_3` int NOT NULL DEFAULT '0',
  `FY_4` int NOT NULL DEFAULT '0',
  `FY_5` int NOT NULL DEFAULT '0',
  `APPROVE_TABLE` json NOT NULL,
  `YEAR_LIST` json NOT NULL,
  `USER_ID` int NOT NULL,
  `IS_DELETED` TINYINT NOT NULL,
  `UPDATE_USER_ID` int NOT NULL,
  `CREATED_DATETIME` datetime NOT NULL,
  `UPDATED_DATETIME` datetime NOT NULL,
  `APP_VERSION` varchar(45) NOT NULL,
  `HISTORY_DATETIME` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`ID`),
  KEY `EVENT_NAME` (`EVENT_NAME`),
  KEY `POM_ID` (`POM_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

CREATE TABLE IF NOT EXISTS USR_ZBT_EVENT_FUNDING_LINES LIKE USR_EVENT_FUNDING_LINES;

CREATE TABLE IF NOT EXISTS USR_ZBT_EVENT_FUNDING_LINES_HISTORY LIKE USR_EVENT_FUNDING_LINES_HISTORY;

CREATE TABLE IF NOT EXISTS  USR_ZBT_AD_FINAL_SAVES LIKE USR_ISSUE_AD_FINAL_SAVES;

SET @dbname = DATABASE();
SET @tablename = 'USR_ISSUE_AD_FINAL_SAVES_HISTORY';
SET @newcol = 'AD_RECOMENDATION';
SET @newtype = 'VARCHAR(100)';
SELECT count(*) INTO @updated FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = @dbname and TABLE_NAME=@tablename and COLUMN_NAME=@newcol AND COLUMN_TYPE=@newtype;
SET @sql := IF(@updated = 1,'SELECT "Table already updated";',CONCAT('ALTER TABLE ', @dbname, '.', @tablename, ' ', " CHANGE COLUMN `AD_RECOMENDATION` `AD_RECOMENDATION` VARCHAR(100) NOT NULL;"));
PREPARE stmt FROM @sql;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;

SET @dbname = DATABASE();
SET @tablename = 'USR_ZBT_AD_FINAL_SAVES_HISTORY';
SET @newcol = 'ZBT_AD_ID';
SELECT count(*) INTO @updated FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = @dbname and TABLE_NAME=@tablename and COLUMN_NAME=@newcol;
SET @sql := IF(@updated = 1,'SELECT "Table already updated";',CONCAT('ALTER TABLE ', @dbname, '.', @tablename, ' ', " CHANGE COLUMN `ISSUE_AD_ID` `ZBT_AD_ID` INT NOT NULL ;"));
PREPARE stmt FROM @sql;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;

CREATE TABLE IF NOT EXISTS  USR_ZBT_AD_FINAL_SAVES_HISTORY LIKE USR_ISSUE_AD_FINAL_SAVES_HISTORY;

SET @dbname = DATABASE();
SET @tablename = 'USR_EVENT_FUNDING_LINES';
SET @newcol = 'IS_DELETED';
SELECT count(*) INTO @updated FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = @dbname and TABLE_NAME=@tablename and COLUMN_NAME=@newcol;
SET @sql := IF(@updated = 1,'SELECT "Table already updated";',CONCAT('ALTER TABLE ', @dbname, '.', @tablename, ' ', " ADD COLUMN `IS_DELETED` TINYINT NOT NULL DEFAULT 0 AFTER `USER_ID`;"));
PREPARE stmt FROM @sql;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;

SET @dbname = DATABASE();
SET @tablename = 'USR_ZBT_EVENT_FUNDING_LINES';
SET @newcol = 'IS_DELETED';
SELECT count(*) INTO @updated FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = @dbname and TABLE_NAME=@tablename and COLUMN_NAME=@newcol;
SET @sql := IF(@updated = 1,'SELECT "Table already updated";',CONCAT('ALTER TABLE ', @dbname, '.', @tablename, ' ', " ADD COLUMN `IS_DELETED` TINYINT NOT NULL DEFAULT 0 AFTER `USER_ID`;"));
PREPARE stmt FROM @sql;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;

CREATE TABLE IF NOT EXISTS USR_ZBT_AO_SAVES_TMP SELECT * FROM  USR_ZBT_AO_SAVES;

SET @dbname = DATABASE();
SET @tablename = 'USR_ZBT_AO_SAVES';
SET @newcol = 'AO_RECOMENDATION';
SET @newtype = "ENUM('Approve', 'Approve at Scale', 'Disapprove')";
SELECT count(*) INTO @updated FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = @dbname and TABLE_NAME=@tablename and COLUMN_NAME=@newcol AND COLUMN_TYPE=@newtype;
SET @sql := IF(@updated = 1,'SELECT "Table already updated";',CONCAT('ALTER TABLE ', @dbname, '.', @tablename, ' ', " CHANGE COLUMN `AO_RECOMENDATION` `AO_RECOMENDATION` ENUM('Approve', 'Approve at Scale', 'Disapprove') NULL DEFAULT NULL;"));
PREPARE stmt FROM @sql;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;

UPDATE USR_ZBT_AO_SAVES SET AO_RECOMENDATION = 'Approve' WHERE ID IN (SELECT ID FROM USR_ZBT_AO_SAVES_TMP WHERE AO_RECOMENDATION = 'Approve as Requested');

DROP  TABLE IF EXISTS USR_ZBT_AO_SAVES_TMP;

CREATE TABLE IF NOT EXISTS USR_ZBT_AD_SAVES_TMP SELECT * FROM  USR_ZBT_AD_SAVES;

SET @dbname = DATABASE();
SET @tablename = 'USR_ZBT_AD_SAVES';
SET @newcol = 'AD_RECOMENDATION';
SET @newtype = "ENUM('Approve', 'Approve at Scale', 'Disapprove')";
SELECT count(*) INTO @updated FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = @dbname and TABLE_NAME=@tablename and COLUMN_NAME=@newcol AND COLUMN_TYPE=@newtype;
SET @sql := IF(@updated = 1,'SELECT "Table already updated";',CONCAT('ALTER TABLE ', @dbname, '.', @tablename, ' ', " CHANGE COLUMN `AD_RECOMENDATION` `AD_RECOMENDATION` ENUM('Approve', 'Approve at Scale', 'Disapprove') NULL DEFAULT NULL;"));
PREPARE stmt FROM @sql;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;

UPDATE USR_ZBT_AD_SAVES SET AD_RECOMENDATION = 'Approve' WHERE ID IN (SELECT ID FROM USR_ZBT_AD_SAVES_TMP WHERE AD_RECOMENDATION = 'Approve as Requested');

DROP  TABLE IF EXISTS USR_ZBT_AD_SAVES_TMP;

CREATE TABLE IF NOT EXISTS USR_ISSUE_AD_SAVES_TMP SELECT * FROM  USR_ISSUE_AD_SAVES;

SET @dbname = DATABASE();
SET @tablename = 'USR_ISSUE_AD_SAVES';
SET @newcol = 'AD_RECOMENDATION';
SET @newtype = "ENUM('Approve', 'Approve at Scale', 'Disapprove')";
SELECT count(*) INTO @updated FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = @dbname and TABLE_NAME=@tablename and COLUMN_NAME=@newcol AND COLUMN_TYPE=@newtype;
SET @sql := IF(@updated = 1,'SELECT "Table already updated";',CONCAT('ALTER TABLE ', @dbname, '.', @tablename, ' ', " CHANGE COLUMN `AD_RECOMENDATION` `AD_RECOMENDATION` ENUM('Approve', 'Approve at Scale', 'Disapprove') NULL DEFAULT NULL;"));
PREPARE stmt FROM @sql;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;

UPDATE USR_ISSUE_AD_SAVES SET AD_RECOMENDATION = 'Approve at Scale' WHERE ID IN (SELECT ID FROM USR_ISSUE_AD_SAVES_TMP WHERE AD_RECOMENDATION = 'Approve at scale');

DROP  TABLE IF EXISTS USR_ISSUE_AD_SAVES_TMP;

CREATE TABLE IF NOT EXISTS USR_ISSUE_AO_SAVES_TMP SELECT * FROM  USR_ISSUE_AO_SAVES;

SET @dbname = DATABASE();
SET @tablename = 'USR_ISSUE_AO_SAVES';
SET @newcol = 'AO_RECOMENDATION';
SET @newtype = "ENUM('Approve', 'Approve at Scale', 'Disapprove')";
SELECT count(*) INTO @updated FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = @dbname and TABLE_NAME=@tablename and COLUMN_NAME=@newcol AND COLUMN_TYPE=@newtype;
SET @sql := IF(@updated = 1,'SELECT "Table already updated";',CONCAT('ALTER TABLE ', @dbname, '.', @tablename, ' ', " CHANGE COLUMN `AO_RECOMENDATION` `AO_RECOMENDATION` ENUM('Approve', 'Approve at Scale', 'Disapprove') NULL DEFAULT NULL;"));
PREPARE stmt FROM @sql;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;

UPDATE USR_ISSUE_AO_SAVES SET AO_RECOMENDATION = 'Approve at Scale' WHERE ID IN (SELECT ID FROM USR_ISSUE_AO_SAVES_TMP WHERE AO_RECOMENDATION = 'Approve at scale');

DROP  TABLE IF EXISTS USR_ISSUE_AO_SAVES_TMP;




CREATE TABLE IF NOT EXISTS USR_ISSUE_AD_FINAL_SAVES_TMP SELECT * FROM  USR_ISSUE_AD_FINAL_SAVES;

SET @dbname = DATABASE();
SET @tablename = 'USR_ISSUE_AD_FINAL_SAVES';
SET @newcol = 'AD_RECOMENDATION';
SET @newtype = "ENUM('Approve', 'Approve at Scale', 'Disapprove')";
SELECT count(*) INTO @updated FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = @dbname and TABLE_NAME=@tablename and COLUMN_NAME=@newcol AND COLUMN_TYPE=@newtype;
SET @sql := IF(@updated = 1,'SELECT "Table already updated";',CONCAT('ALTER TABLE ', @dbname, '.', @tablename, ' ', " CHANGE COLUMN `AD_RECOMENDATION` `AD_RECOMENDATION` ENUM('Approve', 'Approve at Scale', 'Disapprove') NULL DEFAULT NULL;"));
PREPARE stmt FROM @sql;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;

UPDATE USR_ISSUE_AD_FINAL_SAVES SET AD_RECOMENDATION = 'Approve at Scale' WHERE ID IN (SELECT ID FROM USR_ISSUE_AD_FINAL_SAVES_TMP WHERE AD_RECOMENDATION = 'Approve at scale');

DROP  TABLE IF EXISTS USR_ISSUE_AD_FINAL_SAVES_TMP;

CREATE TABLE IF NOT EXISTS USR_ZBT_AD_FINAL_SAVES_TMP SELECT * FROM  USR_ZBT_AD_FINAL_SAVES;

SET @dbname = DATABASE();
SET @tablename = 'USR_ZBT_AD_FINAL_SAVES';
SET @newcol = 'AD_RECOMENDATION';
SET @newtype = "ENUM('Approve', 'Approve at Scale', 'Disapprove')";
SELECT count(*) INTO @updated FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = @dbname and TABLE_NAME=@tablename and COLUMN_NAME=@newcol AND COLUMN_TYPE=@newtype;
SET @sql := IF(@updated = 1,'SELECT "Table already updated";',CONCAT('ALTER TABLE ', @dbname, '.', @tablename, ' ', " CHANGE COLUMN `AD_RECOMENDATION` `AD_RECOMENDATION` ENUM('Approve', 'Approve at Scale', 'Disapprove') NULL DEFAULT NULL;"));
PREPARE stmt FROM @sql;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;

UPDATE USR_ZBT_AD_FINAL_SAVES SET AD_RECOMENDATION = 'Approve at Scale' WHERE ID IN (SELECT ID FROM USR_ZBT_AD_FINAL_SAVES_TMP WHERE AD_RECOMENDATION = 'Approve at scale');

DROP  TABLE IF EXISTS USR_ZBT_AD_FINAL_SAVES_TMP;


