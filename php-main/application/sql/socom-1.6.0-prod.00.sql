
SET @dbname = DATABASE();
SET @tablename = 'USR_DT_SCHEDULER';
SET @newcol = 'WARNINGS';
SELECT count(*) INTO @updated FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = @dbname and TABLE_NAME=@tablename and COLUMN_NAME=@newcol;
SET @sql := IF(@updated = 1,'SELECT "Table already updated";',CONCAT('ALTER TABLE ', @dbname, '.', @tablename, ' ', " ADD COLUMN `WARNINGS` VARCHAR(5000) NULL AFTER `CRON_PROCESSED`;"));
PREPARE stmt FROM @sql;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;

SET @dbname = DATABASE();
SET @tablename = 'USR_DT_SCHEDULER';
SET @newcol = 'TYPE';
SET @newtype = "enum('PROGRAM_SCORE_UPLOAD','DT_UPLOAD_BASE_UPLOAD','DT_UPLOAD_BASE_UPLOAD_APPEND','DT_UPLOAD_EXTRACT_UPLOAD','DT_OUT_POM')";
SELECT count(*) INTO @updated FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = @dbname and TABLE_NAME=@tablename and COLUMN_NAME=@newcol  AND COLUMN_TYPE=@newtype;
SET @sql := IF(@updated = 1,'SELECT "Table already updated";',CONCAT('ALTER TABLE ', @dbname, '.', @tablename, ' ', " CHANGE COLUMN `TYPE` `TYPE` enum('PROGRAM_SCORE_UPLOAD','DT_UPLOAD_BASE_UPLOAD','DT_UPLOAD_BASE_UPLOAD_APPEND','DT_UPLOAD_EXTRACT_UPLOAD','DT_OUT_POM');"));
PREPARE stmt FROM @sql;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;

SET @dbname = DATABASE();
SET @tablename = 'USR_DT_UPLOADS';
SET @newcol = 'TYPE';
SET @newtype = "enum('PROGRAM_SCORE_UPLOAD','DT_UPLOAD_BASE_UPLOAD','DT_UPLOAD_BASE_UPLOAD_APPEND','DT_UPLOAD_EXTRACT_UPLOAD','DT_OUT_POM')";
SELECT count(*) INTO @updated FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = @dbname and TABLE_NAME=@tablename and COLUMN_NAME=@newcol  AND COLUMN_TYPE=@newtype;
SET @sql := IF(@updated = 1,'SELECT "Table already updated";',CONCAT('ALTER TABLE ', @dbname, '.', @tablename, ' ', " CHANGE COLUMN `TYPE` `TYPE` enum('PROGRAM_SCORE_UPLOAD','DT_UPLOAD_BASE_UPLOAD','DT_UPLOAD_BASE_UPLOAD_APPEND','DT_UPLOAD_EXTRACT_UPLOAD','DT_OUT_POM');"));
PREPARE stmt FROM @sql;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;

SET @dbname = DATABASE();
SET @tablename = 'USR_DT_GIT_MAP';
SET @newcol = 'TYPE';
SET @newtype = "enum('UPLOAD_FILE','PROCESS_FILE','CANCEL_FILE','DELETE_FILE','CREATE_METADATA','CREATE_DATABASE','USER_DATA_OPEN','USER_DATA_CLOSE','USER_DATA_EDIT','USER_DATA_HISTORY','USER_DATA_SAVE_START','USER_DATA_SAVE_END','USER_DATA_CANCEL','USER_DATA_FINAL_SUBMISSION','ADMIN_APPROVAL')";
SELECT count(*) INTO @updated FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = @dbname and TABLE_NAME=@tablename and COLUMN_NAME=@newcol  AND COLUMN_TYPE=@newtype;
SET @sql := IF(@updated = 1,'SELECT "Table already updated";',CONCAT('ALTER TABLE ', @dbname, '.', @tablename, ' ', " CHANGE COLUMN `TYPE` `TYPE` enum('UPLOAD_FILE','PROCESS_FILE','CANCEL_FILE','DELETE_FILE','CREATE_METADATA','CREATE_DATABASE','USER_DATA_OPEN','USER_DATA_CLOSE','USER_DATA_EDIT','USER_DATA_HISTORY','USER_DATA_SAVE_START','USER_DATA_SAVE_END','USER_DATA_CANCEL','USER_DATA_FINAL_SUBMISSION','ADMIN_APPROVAL') NOT NULL;"));
PREPARE stmt FROM @sql;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;

SET @dbname = DATABASE();
SET @tablename = 'USR_DT_GIT_DATA';
SET @newcol = 'TYPE';
SET @newtype = "enum('UPLOAD_FILE','PROCESS_FILE','CANCEL_FILE','DELETE_FILE','CREATE_METADATA','CREATE_DATABASE','USER_DATA_OPEN','USER_DATA_CLOSE','USER_DATA_EDIT','USER_DATA_HISTORY','USER_DATA_SAVE_START','USER_DATA_SAVE_END','USER_DATA_CANCEL','USER_DATA_FINAL_SUBMISSION','ADMIN_APPROVAL')";
SELECT count(*) INTO @updated FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = @dbname and TABLE_NAME=@tablename and COLUMN_NAME=@newcol  AND COLUMN_TYPE=@newtype;
SET @sql := IF(@updated = 1,'SELECT "Table already updated";',CONCAT('ALTER TABLE ', @dbname, '.', @tablename, ' ', " CHANGE COLUMN `TYPE` `TYPE` enum('UPLOAD_FILE','PROCESS_FILE','CANCEL_FILE','DELETE_FILE','CREATE_METADATA','CREATE_DATABASE','USER_DATA_OPEN','USER_DATA_CLOSE','USER_DATA_EDIT','USER_DATA_HISTORY','USER_DATA_SAVE_START','USER_DATA_SAVE_END','USER_DATA_CANCEL','USER_DATA_FINAL_SUBMISSION','ADMIN_APPROVAL') NOT NULL;"));
PREPARE stmt FROM @sql;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;


CREATE TABLE IF NOT EXISTS `USR_DT_EDIT_HISTORY_TEMPLATE_2027` (
  `ID` int NOT NULL AUTO_INCREMENT,
  `USR_DT_UPLOAD_ID` int NOT NULL,
  `FISCAL_YEAR` smallint NOT NULL,
  `USER_ID` int NOT NULL,
  `FIELD_CHANGED` varchar(150) NOT NULL,
  `PROGRAM_ID` varchar(500) NOT NULL,
  `ORIGINAL_ROW` json NOT NULL,
  `OLD_VALUE` json NOT NULL,
  `NEW_VALUE` json NOT NULL,
  `CREATED_DATETIME` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_DATETIME` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `REVISION` int NOT NULL DEFAULT 1,
  PRIMARY KEY (`ID`)
) ENGINE=InnoDB CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;


CREATE TABLE IF NOT EXISTS `USR_DT_LOOKUP_TABLE_METADATA` (
  `ID` int NOT NULL AUTO_INCREMENT,
  `CYCLE_ID` INT NOT NULL DEFAULT 1,
  `DIRTY_TABLE_NAME` varchar(50) NOT NULL,
  `FINAL_TABLE_NAME` varchar(50) NOT NULL,
  `IS_FINAL_TABLE_ACTIVE` tinyint NOT NULL DEFAULT '0',
  `USER_ID` int NOT NULL,
  `REVISION` int NOT NULL DEFAULT '1',
  `CREATED_TIMESTAMP` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_TIMESTAMP` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`ID`),
  UNIQUE KEY `idx_dirty_table_name` (`CYCLE_ID`, `DIRTY_TABLE_NAME`),
  UNIQUE KEY `idx_final_table_name` (`CYCLE_ID`, `FINAL_TABLE_NAME`)
) ENGINE=InnoDB CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;


CREATE TABLE IF NOT EXISTS USR_DT_DIRTY_TABLE_EDIT_JOBS (
	ID INT NOT NULL AUTO_INCREMENT,
	PROGRAM_ID varchar(500) NOT NULL,
	`YEAR` VARCHAR(45) NOT NULL,
    USER_ID INT NOT NULL,
    IS_ACTIVE TINYINT NOT NULL DEFAULT 1,
    CREATED_DATETIME DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    UPDATED_DATETIME DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    PRIMARY KEY (ID),
    KEY `idx_is_program_id_year_active` (`PROGRAM_ID`, `YEAR`, `USER_ID`, `IS_ACTIVE`)
);

SET @dbname = DATABASE();
SET @tablename = 'USR_DT_LOOKUP_METADATA';
SET @newcol = 'IS_DIRTY_TABLE_ACTIVE';
SELECT count(*) INTO @updated FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = @dbname and TABLE_NAME=@tablename and COLUMN_NAME=@newcol;
SET @sql := IF(@updated = 1,'SELECT "Table already updated";',CONCAT('ALTER TABLE ', @dbname, '.', @tablename, ' ', " ADD COLUMN `IS_DIRTY_TABLE_ACTIVE` TINYINT NOT NULL DEFAULT 0 AFTER `IS_ACTIVE`;"));
PREPARE stmt FROM @sql;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;

SET @dbname = DATABASE();
SET @tablename = 'USR_DT_LOOKUP_METADATA';
SET @newcol = 'USR_DT_TABLE_METADATA_ID';
SELECT count(*) INTO @updated FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = @dbname and TABLE_NAME=@tablename and COLUMN_NAME=@newcol;
SET @sql := IF(@updated = 1,'SELECT "Table already updated";',CONCAT('ALTER TABLE ', @dbname, '.', @tablename, ' ', " ADD COLUMN `USR_DT_TABLE_METADATA_ID` INT NOT NULL DEFAULT 0 AFTER `USR_DT_UPLOAD_ID`;"));
PREPARE stmt FROM @sql;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;


CREATE TABLE IF NOT EXISTS USR_DT_SUBMIT_APPROVE_ACTIONS (
	ID INT NOT NULL AUTO_INCREMENT,
	`TYPE` ENUM('USER_SUBMIT','ADMIN_APPROVAL') NOT NULL,
	 ACTION_STATUS TINYINT NOT NULL DEFAULT 0,
    USER_ID INT NOT NULL,
    `DESCRIPTION` MEDIUMTEXT  NOT NULL,
    CREATED_DATETIME DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    UPDATED_DATETIME DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    MAP_ID INT NOT NULL DEFAULT 0,
    PRIMARY KEY (ID),
    KEY `idx_is_program_id_year_active` (`TYPE`, `ACTION_STATUS`)                                                                    
);



ALTER TABLE `SOCOM_UI`.`USR_DT_LOOKUP_TABLE_METADATA` 
DROP INDEX `idx_final_table_name` ,
DROP INDEX `idx_dirty_table_name` ;
;
